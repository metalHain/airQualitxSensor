#define DS1307_ADDRESS 0x68
#define CS    7     // adjust this ChipSelect line if needed !

char buffer[24];
int currentTime[7];

#include <Wire.h>
#include <SPI.h>
#include <SD.h>
#include <XMLWriter.h>

void setup()
{
  Wire.begin();
  Serial.begin(9600);
  while (!Serial); // wait for serial port to connect. Needed for native USB
  Serial.flush();
  
  // year (00-99) / month (1-12) / monthday (1-31) / weekday (1-7) / hour (0-23) /  minute (0-59) / second (always zero)
  //setDateTime(23, 6, 14, 4, 18, 3, 0);

  initSDcard();

  delay(2000);
}

void loop()
{
  printDateTime(currentTime);
  addValuesToSDCard(currentTime);
  delay(30000);
}

// Sets date/time of the RTC module via the serial monitor
// year (00-99) / month (1-12) / monthday (1-31) / weekday (1-7) / hour (0-23) /  minute (0-59) / second (always zero)

void setDateTime(byte year, byte month, byte monthday, byte weekday, byte hour, byte minute, byte second)
{
  second = 0;

  // The following codes transmits the data to the RTC
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(byte(0));
  Wire.write(decToBcd(byte(second)));
  Wire.write(decToBcd(byte(minute)));
  Wire.write(decToBcd(byte(hour)));
  Wire.write(decToBcd(byte(hour)));
  Wire.write(decToBcd(byte(monthday)));
  Wire.write(decToBcd(byte(month)));
  Wire.write(decToBcd(byte(year)));
  Wire.write(byte(0));
  Wire.endTransmission();
}

// Prints the current date/time set in the RTC module to the serial monitor

void printDateTime(int nowTime[7])
{
  Wire.beginTransmission(DS1307_ADDRESS);
  Wire.write(0x00);
  Wire.endTransmission();
  Wire.requestFrom(DS1307_ADDRESS, 7);

  while(Wire.available()){
    nowTime[0] = bcdToDec(Wire.read());              // seconds
    nowTime[1] = bcdToDec(Wire.read());              // minute
    nowTime[2] = bcdToDec(Wire.read() & 0b111111);   // hour
    nowTime[3] = bcdToDec(Wire.read());              // weekday
    nowTime[4] = bcdToDec(Wire.read());              // monthday
    nowTime[5] = bcdToDec(Wire.read());              // month
    nowTime[6] = bcdToDec(Wire.read());              // year
  }
}

// Converts a decimal (Base-10) integer to BCD (Binary-coded decimal)
int decToBcd(int value)
{
  return ((value/10*16) + (value%10));
}

// Converts a BCD (Binary-coded decimal) to decimal (Base-10) integer
int bcdToDec(int value)
{
  return ((value/16*10) + (value%16));
}

void initSDcard(){
  // initialize the SD card
  if (!SD.begin(CS))
  {
    Serial.println("init1 Error: SD card failure");
  }

  SD.remove("data.xml");
  delay(1000);

  File logfile = SD.open("data.xml", FILE_WRITE);
  if (!logfile)
  {
    Serial.println("init2Error: SD card failure");
  }

  XMLWriter XML(&logfile);
  XML.header();
  XML.comment("File to track battery level over time", true);
  XML.comment("Time + bat level in volts");
  XML.flush();

  logfile.close();

  Serial.println("Setup done done...");
}

void addValuesToSDCard(int nowTime[7]){
  if (!SD.begin(CS))
  {
    Serial.println("addVal Error: SD card failure");
  }


  File logfile = SD.open("data.xml", FILE_WRITE);
  if (!logfile)
  {
    Serial.println("addVal2 Error: SD card failure");
  }

  XMLWriter XML(&logfile);
  int data[3];

  data[0] = analogRead(A0);
  data[1] = analogRead(A1);
  data[2] = analogRead(A2);

  XML.tagStart("time <and voltage level dd mm yy / hh min sec / batLev");
  XML.tagField("", (uint16_t) nowTime[4]);
  XML.tagField("", (uint16_t) nowTime[5]);
  XML.tagField("", (uint16_t) nowTime[6]);
  XML.tagField("", (uint16_t) nowTime[2]);
  XML.tagField("", (uint16_t) nowTime[1]);
  XML.tagField("", (uint16_t) nowTime[0]);
  XML.tagField("(batLev)", (double) (analogRead(A0) * 5.0 / 1023));
  XML.tagEnd(); 
  XML.flush();

  logfile.close();
}
